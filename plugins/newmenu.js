const config = require('../config')
const {cmd , commands} = require('../command')
const os = require("os")

cmd({
    pattern: "setv",
    alias: ["setv"],
    desc: "settings the bot",
    category: "owner",
    react: "‚öô",
    filename: __filename


},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");
    try {
        let desc = `*DARK SHADOW MENU LIST*_ 
  ‚ï≠‚îÄ„Äå ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥ò·¥Ä…¥·¥á ü„Äç ‚îÄ‚îÄ‚óè‚óè‚ñ∫     
 *‚è≥ Uptime*:  ${runtime(process.uptime())} 
 *üìÇ Ram usage*: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${(os.totalmem() / 1024 / 1024).toFixed(2)}MB
 *‚öôÔ∏è HostName*: ${os.hostname()}
 *üë®‚Äçüíª Owner*: Pathum Malsara
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óè‚óè‚ñ∫

* *üî¢ Reply Below This Number*
‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã
*1‚îÉ‚Ä¢ AI*
*2‚îÉ‚Ä¢ ANIME*
*3‚îÉ‚Ä¢ REACTION*
*4‚îÉ‚Ä¢ CONVERT*
*5‚îÉ‚Ä¢ FUN*
*6‚îÉ‚Ä¢ DOUNLOAD*
*7‚îÉ‚Ä¢ LIST*
*8‚îÉ‚Ä¢ MAIN MENUU*
*9‚îÉ‚Ä¢ GROUP MENU*
*10‚îÉ‚Ä¢ All MENU*
*11‚îÉ‚Ä¢ OWNER MENU*
*12‚îÉ‚Ä¢ OTHER MENU*
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã


> ¬© *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥°*`;

        const vv = await conn.sendMessage(from, { image: { url: "https://i.ibb.co/3yL2ZL8d/2024-8-23-21h39m1s.jpg"}, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1':
                        reply(".AIMENU OPEN =====‚§µÔ∏è" );
                        break;
                    case '2':               
                        reply(".ANIMEMENU OPEN =====‚§µÔ∏è");
                        break;
                    case '3':               
                          reply(".REACTIONS OPEN =====‚§µÔ∏è");
                      break;
                    case '4':     
                        reply(".CONVERTMENU OPEN =====‚§µÔ∏è");
                      break;
                    case '5':     
                        reply(".FUNMENU OPEN =====‚§µÔ∏è ");
                        break;
                    case '6':     
                        reply(".DLMENU OPEN =====‚§µÔ∏è");
                    break;
                    case '7':    
                        reply(".LISTCMD OPEN =====‚§µÔ∏è");
                    break;
                    case '8':    
                        reply(".MAINMENU OPEN =====‚§µÔ∏è");
                    break;                    
                    case '9':    
                        reply(".GROUPMENU OPEN =====‚§µÔ∏è");
                    break;
                    case '1':    
                        reply(".ALLMENU OPEN =====‚§µÔ∏è");
                    break;                                        
                    case '11':    
                        reply(".OWNERMENU OPEN =====‚§µÔ∏è");
                    break;
                    case '12':    
                        reply(".OTHERMENU OPEN =====‚§µÔ∏è");
                    break;                        
                    case '16':    
                        reply(".REPO OPEN =====‚§µÔ∏è");
                    break; 
                    case '17':    
                        reply(".update ALLWAYS_OFFLINE:false");
                    break;                       
                    case '18':    
                        reply(".update READ_MESSAGE:true");
                    break;
                    case '19':    
                        reply(".update READ_MESSAGE:false");
                    break;
                    case '20':    
                        reply(".update config.AUTO_REACT:true");
                    break;
                    case '21':    
                        reply(".update config.AUTO_REACT:false");
                    break;
                    case '22':    
                        reply(".update ANTI_LINK:true");
                    break;
                    case '23':    
                        reply(".update ANTI_LINK:false");
                    break;
                    case '24':    
                        reply(".update ANTI_LINK:fales");
                    break;
                    case '25':
                        reply(".update AUTO_REACT_STATUS:true");
                    break;
                    case '26':
                        reply(".update AUTO_REACT_STATUS:fales");
                    break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});
